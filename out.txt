CommentSection      (* ... *) 
CommentSection      (* ... *) 
CommentSection      (* ... *) 
CommentSection      (* ... *) 
CommentSection      (* ... *) 
CommentSection      (* ... *) 
CommentSection      (* ... *) 
CommentSection      (* ... *) 
CommentSection      (* ... *) 
CommentSection      (* ... *) 
CommentSection      (* ... *) 
CommentSection      (* ... *) 
CommentSection      (* ... *) 
CommentSection      (* ... *) 
CommentSection      (* ... *) 
Open      open 
Identifier      Syntax 
Let      let 
Identifier      ml_automata 
Equality      ==|= 
Ref      ref 
False      false 
Let      let 
Identifier      source_name 
Equality      ==|= 
Ref      ref 
Identifier      None 
Let      let 
Identifier      output_name 
Equality      ==|= 
Ref      ref 
Identifier      None 
Let      let 
Identifier      usage 
Equality      ==|= 
StringLiteral      "usage: ocamllex [options] sourcefile 
Let      let 
Identifier      print_version_string 
LeftParenth      ( 
Equality      ==|= 
Identifier      print_string 
StringLiteral      "The OCaml lexer generator, version  
Semicolon      ; 
Identifier      print_string 
Identifier      Sys 
Dot      . 
Identifier      caml_version 
Semicolon      ; 
Identifier      print_newline 
LeftParenth      ( 
Semicolon      ; 
Identifier      exit 
IntLiteral      0
 
Let      let 
Identifier      print_version_num 
LeftParenth      ( 
Equality      ==|= 
Identifier      print_endline 
Identifier      Sys 
Dot      . 
Identifier      caml_version 
Semicolon      ; 
Identifier      exit 
IntLiteral      0; 
DoubleSemicolon      ;; 
Let      let 
Identifier      specs 
Equality      ==|= 
LeftSquaredBracket      [ 
Minus      - 
Identifier      l 
StringLiteral      ", Arg.Set ml_automata,
     
Identifier      Output 
Identifier      code 
Identifier      that 
Identifier      does 
Identifier      not 
Identifier      use 
Identifier      the 
Identifier      Lexing 
Module      module 
Identifier      built 
Minus      - 
Identifier      n 
Identifier      automata 
Identifier      interpreter 
StringLiteral      ";
    
Minus      - 
StringLiteral      ", Arg.String (fun x -> output_name := Some x),
     
Less      < 
Identifier      ile 
Greater      > 
Identifier      Set 
Identifier      output 
Identifier      file 
Identifier      name 
To      to 
Less      < 
Identifier      ile 
Greater      > 
Semicolon      ; 
StringLiteral      "-q 
Comma      , 
Identifier      Arg 
Dot      . 
Identifier      et 
Identifier      Common 
Dot      . 
Identifier      uiet_mode 
Comma      , 
StringLiteral      " Do not display informational messages 
Semicolon      ; 
StringLiteral      "-v 
Comma      , 
Identifier      Arg 
Dot      . 
Identifier      nit 
Identifier      print_version_string 
Comma      , 
StringLiteral      " Print version and exit 
Semicolon      ; 
StringLiteral      "-version 
Comma      , 
Identifier      Arg 
Dot      . 
Identifier      nit 
Identifier      print_version_string 
Comma      , 
StringLiteral      " Print version and exit 
Semicolon      ; 
StringLiteral      "-vnum 
Comma      , 
Identifier      Arg 
Dot      . 
Identifier      nit 
Identifier      print_version_num 
Comma      , 
StringLiteral      " Print version number and exit 
Semicolon      ; 
RightSquaredBracket      ] 
Let      let 
Identifier      _ 
Equality      ==|= 
Identifier      Arg 
Dot      . 
Identifier      arse 
Identifier      specs 
LeftParenth      ( 
Identifier      un 
Identifier      name 
FunctionalOp      -> 
Identifier      source_name 
AssingmentOperator      := 
Identifier      Some 
Identifier      name 
RightParenth      ) 
Identifier      usage 
Let      let 
Identifier      main 
LeftParenth      ( 
Equality      ==|= 
Let      let 
Identifier      source_name 
Equality      ==|= 
Match      match 
Dereference      ! 
Identifier      source_name 
With      with 
BitOr      | 
Identifier      None 
FunctionalOp      -> 
Identifier      Arg 
Dot      . 
Identifier      sage 
Identifier      specs 
Identifier      usage 
Semicolon      ; 
Identifier      exit 
BitOr      | 
Identifier      Some 
Identifier      name 
FunctionalOp      -> 
Identifier      name 
In      in 
Let      let 
Identifier      dest_name 
Equality      ==|= 
Match      match 
Dereference      ! 
Identifier      output_name 
With      with 
BitOr      | 
Identifier      Some 
Identifier      name 
FunctionalOp      -> 
Identifier      name 
BitOr      | 
Identifier      None 
FunctionalOp      -> 
If      if 
Identifier      Filename 
Dot      . 
Identifier      heck_suffix 
Identifier      source_name 
StringLiteral      ".mll 
Then      then 
Identifier      Filename 
Dot      . 
Identifier      hop_suffix 
Identifier      source_name 
StringLiteral      ".mll 
StringConcat      ^ 
StringLiteral      ".ml 
Else      else 
Identifier      source_name 
StringConcat      ^ 
StringLiteral      ".ml 
In      in 
Let      let 
Identifier      ic 
Equality      ==|= 
Identifier      open_in_bin 
Identifier      source_name 
In      in 
Let      let 
Identifier      oc 
Equality      ==|= 
Identifier      open_out 
Identifier      dest_name 
In      in 
Let      let 
Identifier      tr 
Equality      ==|= 
Identifier      Common 
Dot      . 
Identifier      pen_tracker 
Identifier      dest_name 
Identifier      oc 
In      in 
Let      let 
Identifier      lexbuf 
Equality      ==|= 
Identifier      Lexing 
Dot      . 
Identifier      rom_channel 
Identifier      ic 
In      in 
Identifier      lexbuf 
Dot      . 
Identifier      exing 
Dot      . 
Identifier      ex_curr_p 
VariableAssignment      <- 
LeftBrace      { 
Identifier      exing 
Dot      . 
Identifier      os_fname 
Equality      ==|= 
Identifier      source_name 
Semicolon      ; 
Identifier      Lexing 
Dot      . 
Identifier      os_lnum 
Equality      ==|= 
Identifier      Lexing 
Dot      . 
Identifier      os_bol 
Equality      ==|= 
IntLiteral      0; 
Identifier      Lexing 
Dot      . 
Identifier      os_cnum 
Equality      ==|= 
IntLiteral      0} 
Semicolon      ; 
Try      try 
Let      let 
Identifier      def 
Equality      ==|= 
Identifier      Parser 
Dot      . 
Identifier      exer_definition 
Identifier      Lexer 
Dot      . 
Identifier      ain 
Identifier      lexbuf 
In      in 
Let      let 
LeftParenth      ( 
Identifier      ntries 
Comma      , 
Identifier      transitions 
RightParenth      ) 
Equality      ==|= 
Identifier      Lexgen 
Dot      . 
Identifier      ake_dfa 
Identifier      def 
Dot      . 
Identifier      ntrypoints 
In      in 
If      if 
Dereference      ! 
Identifier      ml_automata 
Then      then 
Begin      begin 
Identifier      Outputbis 
Dot      . 
Identifier      utput_lexdef 
Identifier      ic 
Identifier      oc 
Identifier      tr 
Identifier      def 
Dot      . 
Identifier      eader 
Identifier      def 
Dot      . 
Identifier      efill_handler 
Identifier      entries 
Identifier      transitions 
Identifier      def 
Dot      . 
Identifier      railer 
End      end 
Else      else 
Begin      begin 
Let      let 
Identifier      tables 
Equality      ==|= 
Identifier      Compact 
Dot      . 
Identifier      ompact_tables 
Identifier      transitions 
In      in 
Identifier      Output 
Dot      . 
Identifier      utput_lexdef 
Identifier      ic 
Identifier      oc 
Identifier      tr 
Identifier      def 
Dot      . 
Identifier      eader 
Identifier      def 
Dot      . 
Identifier      efill_handler 
Identifier      tables 
Identifier      entries 
Identifier      def 
Dot      . 
Identifier      railer 
End      end 
Semicolon      ; 
Identifier      close_in 
Identifier      ic 
Semicolon      ; 
Identifier      close_out 
Identifier      oc 
Semicolon      ; 
Identifier      Common 
Dot      . 
Identifier      lose_tracker 
Identifier      tr 
Semicolon      ; 
With      with 
Identifier      exn 
FunctionalOp      -> 
Let      let 
Identifier      bt 
Equality      ==|= 
Identifier      Printexc 
Dot      . 
Identifier      et_raw_backtrace 
LeftParenth      ( 
In      in 
Identifier      close_in 
Identifier      ic 
Semicolon      ; 
Identifier      close_out 
Identifier      oc 
Semicolon      ; 
Identifier      Common 
Dot      . 
Identifier      lose_tracker 
Identifier      tr 
Semicolon      ; 
Identifier      Sys 
Dot      . 
Identifier      emove 
Identifier      dest_name 
Semicolon      ; 
Begin      begin 
Match      match 
Identifier      exn 
With      with 
BitOr      | 
Identifier      Cset 
Dot      . 
Identifier      ad 
FunctionalOp      -> 
Let      let 
Identifier      p 
Equality      ==|= 
Identifier      Lexing 
Dot      . 
Identifier      exeme_start_p 
Identifier      lexbuf 
In      in 
Identifier      Printf 
Dot      . 
Identifier      printf 
Identifier      stderr 
StringLiteral      "File \"%s\", line %d, character %d: character set expected.\n 
Identifier      p 
Dot      . 
Identifier      exing 
Dot      . 
Identifier      os_fname 
Identifier      p 
Dot      . 
Identifier      exing 
Dot      . 
Identifier      os_lnum 
LeftParenth      ( 
Dot      . 
Identifier      exing 
Dot      . 
Identifier      os_cnum 
Minus      - 
Identifier      p 
Dot      . 
Identifier      exing 
Dot      . 
Identifier      os_bol 
RightParenth      ) 
BitOr      | 
Identifier      Parsing 
Dot      . 
Identifier      arse_error 
FunctionalOp      -> 
Let      let 
Identifier      p 
Equality      ==|= 
Identifier      Lexing 
Dot      . 
Identifier      exeme_start_p 
Identifier      lexbuf 
In      in 
Identifier      Printf 
Dot      . 
Identifier      printf 
Identifier      stderr 
StringLiteral      "File \"%s\", line %d, character %d: syntax error.\n 
Identifier      p 
Dot      . 
Identifier      exing 
Dot      . 
Identifier      os_fname 
Identifier      p 
Dot      . 
Identifier      exing 
Dot      . 
Identifier      os_lnum 
LeftParenth      ( 
Dot      . 
Identifier      exing 
Dot      . 
Identifier      os_cnum 
Minus      - 
Identifier      p 
Dot      . 
Identifier      exing 
Dot      . 
Identifier      os_bol 
RightParenth      ) 
BitOr      | 
Identifier      Lexer 
Dot      . 
Identifier      exical_error 
LeftParenth      ( 
Identifier      sg 
Comma      , 
Identifier      file 
Comma      , 
Identifier      line 
Comma      , 
Identifier      col 
RightParenth      ) 
FunctionalOp      -> 
Identifier      Printf 
Dot      . 
Identifier      printf 
Identifier      stderr 
StringLiteral      "File \"%s\", line %d, character %d: %s.\n 
Identifier      file 
Identifier      line 
Identifier      col 
Identifier      msg 
BitOr      | 
Identifier      Lexgen 
Dot      . 
Identifier      emory_overflow 
FunctionalOp      -> 
Identifier      Printf 
Dot      . 
Identifier      printf 
Identifier      stderr 
StringLiteral      "File \"%s\":\n Position memory overflow, too many bindings\n 
Identifier      source_name 
BitOr      | 
Identifier      Output 
Dot      . 
Identifier      able_overflow 
FunctionalOp      -> 
Identifier      Printf 
Dot      . 
Identifier      printf 
Identifier      stderr 
StringLiteral      "File \"%s\":\ntransition table overflow, automaton is too big\n 
Identifier      source_name 
BitOr      | 
Identifier      _ 
FunctionalOp      -> 
Identifier      Printexc 
Dot      . 
Identifier      aise_with_backtrace 
Identifier      exn 
Identifier      bt 
End      end 
Semicolon      ; 
Identifier      exit 
Let      let 
Identifier      _ 
Equality      ==|= 
CommentSection      (* ... *) 
Identifier      main 
LeftParenth      ( 
Semicolon      ; 
Identifier      exit 
IntLiteral      0
 
Eof      eof 
